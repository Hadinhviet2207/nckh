import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:image/image.dart' as img;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:stonelens/models/rock_classifier.dart';
import 'package:stonelens/views/home/StoneDetailScreen.dart';
import 'package:stonelens/widgets/homepage/custom_dialog.dart';

class RockImageRecognizer {
  final ImagePicker _picker = ImagePicker();

  // 1. Ch·ªçn ·∫£nh t·ª´ gallery
  Future<void> pickAndRecognizeImage(BuildContext context) async {
    final XFile? imageFile =
        await _picker.pickImage(source: ImageSource.gallery);

    if (imageFile == null) return;

    await _processImage(context, imageFile);
  }

  // 2. Nh·∫≠n ·∫£nh t·ª´ camera d∆∞·ªõi d·∫°ng XFile
  Future<void> recognizeImageFromFile(
      BuildContext context, XFile imageFile) async {
    await _processImage(context, imageFile);
  }

  // H√†m private x·ª≠ l√Ω chung ·∫£nh nh·∫≠n ƒë∆∞·ª£c
  Future<void> _processImage(BuildContext context, XFile imageFile) async {
    try {
      final bytes = await File(imageFile.path).readAsBytes();
      final image = img.decodeImage(bytes);

      if (image == null) {
        showRockAlertDialog(
          context,
          'L·ªói ·∫£nh',
          'Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.',
        );
        return;
      }

      final classifier = RockClassifier();
      await classifier.loadModel();

      final result = await classifier.predict(image);
      int predictedIndex = result['predictedIndex'];
      double confidence = result['confidence'];
      print(
          "üéØ K·∫øt qu·∫£ d·ª± ƒëo√°n: $predictedIndex | ƒê·ªô ch√≠nh x√°c: ${(confidence * 100).toStringAsFixed(2)}%");

      // Danh s√°ch ID ƒë√° trong Firestore, index t∆∞∆°ng ·ª©ng v·ªõi predictedIndex
      final List<String> rockIds = [
        'I9L193idhSdBqeMPghOU',
        'DviEhCtAbdse1mO5ELO3',
        'Sgh169zpRAvDNpSlrELt',
        'M3lz86JyDr6fDW9ZND44',
      ];

      // N·∫øu predictedIndex kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ trong danh s√°ch
      if (predictedIndex < 0 || predictedIndex >= rockIds.length) {
        showRockAlertDialog(
          context,
          'Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c',
          '·∫¢nh kh√¥ng ph·∫£i ƒë√° ho·∫∑c ch∆∞a c√≥ d·ªØ li·ªáu v·ªÅ ƒë√° n√†y. Vui l√≤ng th·ª≠ l·∫°i.',
        );
        return;
      }

      if (confidence < 0.50) {
        showRockAlertDialog(
          context,
          'Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c',
          '·∫¢nh kh√¥ng r√µ r√†ng. Vui l√≤ng th·ª≠ l·∫°i.',
        );
        return;
      }

      final String predictedRockId = rockIds[predictedIndex];
      final snapshot = await FirebaseFirestore.instance
          .collection('_rocks')
          .doc(predictedRockId)
          .get();

      if (!snapshot.exists) {
        showRockAlertDialog(
          context,
          'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu',
          'Kh√¥ng c√≥ d·ªØ li·ªáu cho lo·∫°i ƒë√° ƒë√£ nh·∫≠n di·ªán.',
        );
        return;
      }

      final Map<String, dynamic> data = snapshot.data()!;
      // Th√™m id document v√†o map data ƒë·ªÉ sau n√†y d√πng cho y√™u th√≠ch
      final Map<String, dynamic> dataWithId = Map<String, dynamic>.from(data);
      dataWithId['id'] = snapshot.id;

      // Th·ªùi gian hi·ªán t·∫°i
      final now = DateTime.now().toUtc().add(const Duration(hours: 7));
      final formattedTime =
          "${now.hour.toString().padLeft(2, '0')}:${now.minute.toString().padLeft(2, '0')} - "
          "${now.day.toString().padLeft(2, '0')}/${now.month.toString().padLeft(2, '0')}/${now.year}";

      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        final historyRef = FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .collection('history_rocks');

        final existingQuery = await historyRef
            .where('tenDa', isEqualTo: data['tenDa'])
            .limit(1)
            .get();

        if (existingQuery.docs.isEmpty) {
          await historyRef.add({
            'rock_id': predictedRockId,
            'tenDa': data['tenDa'],
            'time': formattedTime,
            'predictedAt': FieldValue.serverTimestamp(),
          });
        } else {
          print("‚ö†Ô∏è ƒê√° n√†y ƒë√£ c√≥ trong l·ªãch s·ª≠, kh√¥ng th√™m l·∫°i.");
        }
      }

      // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh chi ti·∫øt ƒë√°, truy·ªÅn d·ªØ li·ªáu ƒë√£ c√≥ id
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => StoneDetailScreen(
            stoneData: jsonEncode(dataWithId), // encode map c√≥ id
          ),
        ),
      );
    } catch (e) {
      print("üî• L·ªói x·ª≠ l√Ω ·∫£nh ho·∫∑c nh·∫≠n di·ªán: $e");
      showRockAlertDialog(
        context,
        'L·ªói h·ªá th·ªëng',
        'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ·∫£nh, vui l√≤ng th·ª≠ l·∫°i.',
      );
    }
  }
}
