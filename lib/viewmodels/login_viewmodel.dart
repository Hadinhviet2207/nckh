import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:stonelens/services/auth_error_handler.dart';

class LoginViewModel extends ChangeNotifier {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  Future<User?> login(
      BuildContext context, String email, String password) async {
    _isLoading = true;
    notifyListeners();

    try {
      // üîê B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p Firebase Authentication
      final result = await _auth.signInWithEmailAndPassword(
        email: email.trim(), // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng
        password: password,
      );

      final user = result.user;
      if (user == null) {
        AuthErrorHandler.showStyledDialog(
          context,
          "L·ªói",
          "ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
        );
        return null;
      }

      // üîç B∆∞·ªõc 2: Truy v·∫•n d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ Firestore
      final querySnapshot = await _firestore
          .collection('users')
          .where('email', isEqualTo: email.trim())
          .limit(1)
          .get();

      if (querySnapshot.docs.isEmpty) {
        AuthErrorHandler.showStyledDialog(
          context,
          "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
          "T√†i kho·∫£n t·ªìn t·∫°i trong Authentication nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu trong h·ªá th·ªëng.",
        );
        return null;
      }

      final userData = querySnapshot.docs.first.data();

      // üõë B∆∞·ªõc 3: Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
      if (userData['isDisabled'] == true) {
        AuthErrorHandler.showStyledDialog(
          context,
          "T√†i kho·∫£n b·ªã kh√≥a",
          "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.",
        );
        return null;
      }

      // üßæ B∆∞·ªõc 4: Ki·ªÉm tra quy·ªÅn truy c·∫≠p
      final allowedRoles = ['user', 'admin'];
      if (!allowedRoles.contains(userData['role'])) {
        AuthErrorHandler.showStyledDialog(
          context,
          "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
          "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n n√†y.",
        );
        return null;
      }

      return user;
    } on FirebaseAuthException catch (e) {
      String message;
      switch (e.code) {
        case 'wrong-password':
          message = "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra l·∫°i.";
          break;
        case 'invalid-credential':
          message =
              "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra email v√† m·∫≠t kh·∫©u.";
          break;
        case 'user-not-found':
          message = "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y.";
          break;
        case 'user-disabled':
          message =
              "T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.";
          break;
        case 'invalid-email':
          message = "Email kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng email.";
          break;
        default:
          message = "L·ªói ƒëƒÉng nh·∫≠p: ${e.message}";
      }
      AuthErrorHandler.showStyledDialog(context, "L·ªói ƒëƒÉng nh·∫≠p", message);
      return null;
    } catch (e) {
      AuthErrorHandler.showStyledDialog(context, "L·ªói", e.toString());
      return null;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
}
